Index: gobject/valaccodeclassbinding.vala
===================================================================
--- gobject/valaccodeclassbinding.vala	(revision 1325)
+++ gobject/valaccodeclassbinding.vala	(working copy)
@@ -749,6 +749,13 @@
 			return;
 		}
 		var dbus_iface_name = dbus.get_string ("name");
+		string str_signals = dbus.get_string("signals");
+		string str_properties = dbus.get_string("properties");
+
+		message("dbus_iface_name = %s", dbus_iface_name);
+		message("signals = %s", str_signals);
+		message("properties = %s", str_properties);
+
 		if (dbus_iface_name == null) {
 			return;
 		}
@@ -769,7 +776,7 @@
 			}
 
 			dbus_methods.append ("{ (GCallback) ");
-			dbus_methods.append (m.get_cname ());
+			dbus_methods.append ( m.overrides ? m.base_method.get_cname() : m.get_cname ());
 			dbus_methods.append (", ");
 			dbus_methods.append (codegen.get_marshaller_function (m.get_parameters (), m.return_type));
 			dbus_methods.append (", ");
@@ -844,6 +851,32 @@
 
 		dbus_methods.append ("}\n");
 
+		var dbus_signals = new StringBuilder();
+		dbus_signals.append_c('"');
+		if(str_signals != null) {
+			string[] strv_signals = str_signals.split(",");
+				foreach (string s in strv_signals) {
+					dbus_signals.append(dbus_iface_name);
+					dbus_signals.append("\\0");
+					dbus_signals.append(s.strip());
+					dbus_signals.append("\\0");
+				}
+		}
+		dbus_signals.append_c('"');
+
+		var dbus_props = new StringBuilder();
+		dbus_props.append_c('"');
+		if(str_properties != null) {
+			string[] strv_properties = str_properties.split(",");
+				foreach (string p in strv_properties) {
+					dbus_props.append(dbus_iface_name);
+					dbus_props.append("\\0");
+					dbus_props.append(p.strip());
+					dbus_props.append("\\0");
+				}
+		}
+		dbus_props.append_c('"');
+
 		var dbus_methods_decl = new CCodeDeclaration ("const DBusGMethodInfo");
 		dbus_methods_decl.modifiers = CCodeModifiers.STATIC;
 		dbus_methods_decl.add_declarator (new CCodeVariableDeclarator.with_initializer ("%s_dbus_methods[]".printf (cl.get_lower_case_cname ()), new CCodeConstant (dbus_methods.str)));
@@ -851,7 +884,7 @@
 
 		var dbus_object_info = new CCodeDeclaration ("const DBusGObjectInfo");
 		dbus_object_info.modifiers = CCodeModifiers.STATIC;
-		dbus_object_info.add_declarator (new CCodeVariableDeclarator.with_initializer ("%s_dbus_object_info".printf (cl.get_lower_case_cname ()), new CCodeConstant ("{ 0, %s_dbus_methods, %d, %s, \"\\0\", \"\\0\" }".printf (cl.get_lower_case_cname (), method_count, blob.str))));
+		dbus_object_info.add_declarator (new CCodeVariableDeclarator.with_initializer ("%s_dbus_object_info".printf (cl.get_lower_case_cname ()), new CCodeConstant ("{ 0, %s_dbus_methods, %d, %s, %s, %s }".printf (cl.get_lower_case_cname (), method_count, blob.str, dbus_signals.str, dbus_props.str))));
 		codegen.class_init_fragment.append (dbus_object_info);
 
 		var install_call = new CCodeFunctionCall (new CCodeIdentifier ("dbus_g_object_type_install_info"));
