Index: gtk+-aqd/gtk/libgnomenu.c
===================================================================
--- gtk+-aqd/gtk/libgnomenu.c	(revision 0)
+++ gtk+-aqd/gtk/libgnomenu.c	(revision 0)
@@ -0,0 +1,77 @@
+#include <config.h>
+#include "gtkmain.h"
+#include "gtkprivate.h"
+#include "libgnomenu.h"
+
+static GModule * module = NULL;
+static gulong * version = NULL;
+
+gboolean (*_gnomenu_init)();
+GQuark (*_gnomenu_create)(const gchar * hint);
+gboolean (*_gnomenu_set_property)(GQuark item, gchar * property, gchar * value);
+gboolean (*_gnomenu_get_property)(GQuark item, gchar * property, gchar ** value);
+gboolean (*_gnomenu_insert_child)(GQuark menu, GQuark item, gint pos);
+gboolean (*_gnomenu_remove_item)(GQuark menu, GQuark item);
+gboolean (*_gnomenu_destroy)(GQuark object);
+
+static gboolean libgnomenu_load(){
+	module = g_module_open("libgnomenu", 0);
+	if(!module) {
+		g_warning("Global Menu Library not found; \n"
+				"This is no fatal; you only lose global menu.");
+		module = NULL;
+	}
+	g_module_symbol(module, "gnomenu_version", &version);
+	if((*version) >> 16 != 5) {
+		g_warning("Global Menu Version mismatch.\n");
+		module = NULL;
+	}
+#define GET_SYMBOL(x) \
+	if(!g_module_symbol(module, #x, & _ ## x)){ \
+		module = NULL; \
+		g_warning("symbol %s not found", #x); \
+	}
+	GET_SYMBOL(gnomenu_init);
+	GET_SYMBOL(gnomenu_create);
+	GET_SYMBOL(gnomenu_set_property);
+	GET_SYMBOL(gnomenu_get_property);
+	GET_SYMBOL(gnomenu_insert_child);
+	GET_SYMBOL(gnomenu_remove_item);
+	GET_SYMBOL(gnomenu_destroy);
+
+	if(module == NULL) {
+		return FALSE;
+	}
+	return TRUE;
+}
+static gboolean g_gnomenu_initialized = FALSE;
+gboolean gnomenu_init() {
+	if(!g_gnomenu_initialized){
+		g_gnomenu_initialized = libgnomenu_load();
+	}
+	if(g_gnomenu_initialized)
+		g_gnomenu_initialized  = _gnomenu_init();
+	return g_gnomenu_initialized;
+}
+gboolean gnomenu_initalized(){
+	return g_gnomenu_initialized;
+}
+GQuark gnomenu_create(const gchar * hint){
+	return _gnomenu_create(hint);
+
+}
+gboolean gnomenu_set_property(GQuark item, gchar * property, gchar * value){
+	return _gnomenu_set_property(item, property, value);
+}
+gboolean gnomenu_get_property(GQuark item, gchar * property, gchar ** value) {
+	return gnomenu_get_property(item, property, value);
+}
+gboolean gnomenu_insert_child(GQuark menu, GQuark item, gint pos){
+	return gnomenu_insert_child(menu, item, pos);
+}
+gboolean gnomenu_remove_item(GQuark menu, GQuark item) {
+	return gnomenu_remove_item(menu, item);
+}
+gboolean gnomenu_destroy(GQuark object){
+	return gnomenu_destroy(object);
+}
Index: gtk+-aqd/gtk/libgnomenu.h
===================================================================
--- gtk+-aqd/gtk/libgnomenu.h	(revision 0)
+++ gtk+-aqd/gtk/libgnomenu.h	(revision 0)
@@ -0,0 +1,2 @@
+#include "menu.h"
+gboolean gnomenu_initalized();
Index: gtk+-aqd/gtk/gtkmenubar.c
===================================================================
--- gtk+-aqd/gtk/gtkmenubar.c	(revision 20909)
+++ gtk+-aqd/gtk/gtkmenubar.c	(working copy)
@@ -39,7 +39,9 @@
 #include "gtkprivate.h"
 #include "gtkalias.h"
 
+#include "libgnomenu.h" /* libgnomenu */
 
+
 #define BORDER_SPACING  0
 #define DEFAULT_IPADDING 1
 
@@ -215,6 +217,7 @@
 						   GTK_PARAM_READWRITE));
 
   g_type_class_add_private (gobject_class, sizeof (GtkMenuBarPrivate));  
+
 }
 
 static void
Index: gtk+-aqd/gtk/gtkmain.c
===================================================================
--- gtk+-aqd/gtk/gtkmain.c	(revision 20909)
+++ gtk+-aqd/gtk/gtkmain.c	(working copy)
@@ -383,6 +383,7 @@
 
 static GString *gtk_modules_string = NULL;
 static gboolean g_fatal_warnings = FALSE;
+G_MODULE_EXPORT gboolean gtk_no_global_menu = FALSE ;
 
 #ifdef G_ENABLE_DEBUG
 static gboolean
@@ -423,6 +424,8 @@
 }
 
 static const GOptionEntry gtk_args[] = {
+  { "gtk-no-global-menu", 0, 0, G_OPTION_ARG_NONE, &gtk_no_global_menu,
+	  N_("Disable Global Menu") },
   { "gtk-module",       0, 0, G_OPTION_ARG_CALLBACK, gtk_arg_module_cb,   
     /* Description of --gtk-module=MODULES in --help output */ N_("Load additional GTK+ modules"), 
     /* Placeholder in --gtk-module=MODULES in --help output */ N_("MODULES") },
@@ -733,6 +736,12 @@
 	  
 	  return FALSE;
 	}
+
+  if(!gtk_no_global_menu){
+	  gnomenu_init();
+	  if(!gnomenu_initalized())
+		g_warning("Gnomenu failed to start.");
+  }
     }
 
   return TRUE;
@@ -912,7 +921,16 @@
   if (!gtk_parse_args (argc, argv))
     return FALSE;
 
-  return gdk_display_open_default_libgtk_only () != NULL;
+  if(gdk_display_open_default_libgtk_only () != NULL)
+  {
+	  if(!gtk_no_global_menu){
+		  gnomenu_init();
+		  if(!gnomenu_initalized())
+			g_warning("Gnomenu failed to start.");
+	  }
+	  return TRUE;
+  }
+  return FALSE;
 }
 
 #ifdef G_PLATFORM_WIN32
Index: gtk+-aqd/gtk/libgnomenu/menu.h
===================================================================
--- gtk+-aqd/gtk/libgnomenu/menu.h	(revision 0)
+++ gtk+-aqd/gtk/libgnomenu/menu.h	(revision 0)
@@ -0,0 +1,10 @@
+#ifndef _MENU_H_
+#define _MENU_H_
+gboolean gnomenu_init();
+GQuark gnomenu_create(const gchar * hint);
+gboolean gnomenu_set_property(GQuark item, gchar * property, gchar * value);
+gboolean gnomenu_get_property(GQuark item, gchar * property, gchar ** value);
+gboolean gnomenu_insert_child(GQuark menu, GQuark item, gint pos);
+gboolean gnomenu_remove_item(GQuark menu, GQuark item);
+gboolean gnomenu_destroy(GQuark object);
+#endif
Index: gtk+-aqd/gtk/Makefile.am
===================================================================
--- gtk+-aqd/gtk/Makefile.am	(revision 20909)
+++ gtk+-aqd/gtk/Makefile.am	(working copy)
@@ -345,6 +345,7 @@
 
 # GTK+ header files that don't get installed
 gtk_private_h_sources =		\
+	libgnomenu.h	\
 	gtkquery.h		\
 	gtksearchengine.h	\
 	gtksearchenginesimple.h	\
@@ -390,6 +391,7 @@
 
 # GTK+ C sources to build the library from
 gtk_base_c_sources =            \
+	libgnomenu.c \
 	gtkquery.c		\
 	gtksearchengine.c	\
 	gtksearchenginesimple.c	\
